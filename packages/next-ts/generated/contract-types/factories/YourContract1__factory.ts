/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { YourContract1, YourContract1Interface } from "../YourContract1";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "startingPurpose",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "purpose",
        type: "string",
      },
    ],
    name: "SetPurpose",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "purpose",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newPurpose",
        type: "string",
      },
    ],
    name: "setPurpose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260405161064e38038061064e833981016040819052610022916100eb565b805161003590600090602084019061003c565b50506101f5565b828054610048906101ba565b90600052602060002090601f01602090048101928261006a57600085556100b0565b82601f1061008357805160ff19168380011785556100b0565b828001600101855582156100b0579182015b828111156100b0578251825591602001919060010190610095565b506100bc9291506100c0565b5090565b5b808211156100bc57600081556001016100c1565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156100fe57600080fd5b82516001600160401b038082111561011557600080fd5b818501915085601f83011261012957600080fd5b81518181111561013b5761013b6100d5565b604051601f8201601f19908116603f01168101908382118183101715610163576101636100d5565b81604052828152888684870101111561017b57600080fd5b600093505b8284101561019d5784840186015181850187015292850192610180565b828411156101ae5760008684830101525b98975050505050505050565b600181811c908216806101ce57607f821691505b602082108114156101ef57634e487b7160e01b600052602260045260246000fd5b50919050565b61044a806102046000396000f3fe60806040526004361061002a5760003560e01c806370740aab14610033578063eb68757f1461005e57005b3661003157005b005b34801561003f57600080fd5b5061004861007e565b60405161005591906101f6565b60405180910390f35b34801561006a57600080fd5b50610031610079366004610261565b61010c565b6000805461008b90610312565b80601f01602080910402602001604051908101604052809291908181526020018280546100b790610312565b80156101045780601f106100d957610100808354040283529160200191610104565b820191906000526020600020905b8154815290600101906020018083116100e757829003601f168201915b505050505081565b805161011f90600090602084019061015d565b507f6ea5d6383a120235c7728a9a6751672a8ac068e4ed34dcca2ee444182c1812de33600060405161015292919061034d565b60405180910390a150565b82805461016990610312565b90600052602060002090601f01602090048101928261018b57600085556101d1565b82601f106101a457805160ff19168380011785556101d1565b828001600101855582156101d1579182015b828111156101d15782518255916020019190600101906101b6565b506101dd9291506101e1565b5090565b5b808211156101dd57600081556001016101e2565b600060208083528351808285015260005b8181101561022357858101830151858201604001528201610207565b81811115610235576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561027357600080fd5b813567ffffffffffffffff8082111561028b57600080fd5b818401915084601f83011261029f57600080fd5b8135818111156102b1576102b161024b565b604051601f8201601f19908116603f011681019083821181831017156102d9576102d961024b565b816040528281528760208487010111156102f257600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061032657607f821691505b6020821081141561034757634e487b7160e01b600052602260045260246000fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff83168152600060206040818401526000845481600182811c91508083168061038b57607f831692505b8583108114156103a957634e487b7160e01b85526022600452602485fd5b60408801839052606088018180156103c857600181146103d957610404565b60ff19861682528782019650610404565b60008b81526020902060005b868110156103fe578154848201529085019089016103e5565b83019750505b50949a995050505050505050505056fea2646970667358221220b7903c5b7fb10b56e6d995acca52909cf686db94fb252892950b7b74761a1b5164736f6c634300080a0033";

type YourContract1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YourContract1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YourContract1__factory extends ContractFactory {
  constructor(...args: YourContract1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "YourContract1";
  }

  deploy(
    startingPurpose: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<YourContract1> {
    return super.deploy(
      startingPurpose,
      overrides || {}
    ) as Promise<YourContract1>;
  }
  getDeployTransaction(
    startingPurpose: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(startingPurpose, overrides || {});
  }
  attach(address: string): YourContract1 {
    return super.attach(address) as YourContract1;
  }
  connect(signer: Signer): YourContract1__factory {
    return super.connect(signer) as YourContract1__factory;
  }
  static readonly contractName: "YourContract1";
  public readonly contractName: "YourContract1";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YourContract1Interface {
    return new utils.Interface(_abi) as YourContract1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YourContract1 {
    return new Contract(address, _abi, signerOrProvider) as YourContract1;
  }
}
