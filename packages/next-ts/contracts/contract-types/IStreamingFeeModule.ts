/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IStreamingFeeModule {
  export type FeeStateStruct = {
    feeRecipient: string;
    maxStreamingFeePercentage: BigNumberish;
    streamingFeePercentage: BigNumberish;
    lastStreamingFeeTimestamp: BigNumberish;
  };

  export type FeeStateStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    feeRecipient: string;
    maxStreamingFeePercentage: BigNumber;
    streamingFeePercentage: BigNumber;
    lastStreamingFeeTimestamp: BigNumber;
  };
}

export interface IStreamingFeeModuleInterface extends utils.Interface {
  contractName: "IStreamingFeeModule";
  functions: {
    "accrueFee(address)": FunctionFragment;
    "feeStates(address)": FunctionFragment;
    "getFee(address)": FunctionFragment;
    "initialize(address,(address,uint256,uint256,uint256))": FunctionFragment;
    "updateFeeRecipient(address,address)": FunctionFragment;
    "updateStreamingFee(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accrueFee", values: [string]): string;
  encodeFunctionData(functionFragment: "feeStates", values: [string]): string;
  encodeFunctionData(functionFragment: "getFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, IStreamingFeeModule.FeeStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStreamingFee",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accrueFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeStates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStreamingFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IStreamingFeeModule extends BaseContract {
  contractName: "IStreamingFeeModule";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStreamingFeeModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accrueFee(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeStates(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[IStreamingFeeModule.FeeStateStructOutput]>;

    getFee(_setToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _setToken: string,
      _settings: IStreamingFeeModule.FeeStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStreamingFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accrueFee(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeStates(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<IStreamingFeeModule.FeeStateStructOutput>;

  getFee(_setToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _setToken: string,
    _settings: IStreamingFeeModule.FeeStateStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeRecipient(
    _setToken: string,
    _newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStreamingFee(
    _setToken: string,
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accrueFee(_setToken: string, overrides?: CallOverrides): Promise<void>;

    feeStates(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<IStreamingFeeModule.FeeStateStructOutput>;

    getFee(_setToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _settings: IStreamingFeeModule.FeeStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStreamingFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accrueFee(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeStates(_setToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFee(_setToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _settings: IStreamingFeeModule.FeeStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStreamingFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueFee(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeStates(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      _settings: IStreamingFeeModule.FeeStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStreamingFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
