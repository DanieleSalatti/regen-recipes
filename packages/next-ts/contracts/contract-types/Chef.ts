/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ChefInterface extends utils.Interface {
  contractName: "Chef";
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "SetDebtIssuanceModuleV2(address)": FunctionFragment;
    "SetExchangeIssuanceZeroEx(address)": FunctionFragment;
    "SetFeeRecipient(address)": FunctionFragment;
    "SetManagerIssueFee(uint256)": FunctionFragment;
    "SetManagerRedeemFee(uint256)": FunctionFragment;
    "SetMaxManagerFee(uint256)": FunctionFragment;
    "SetMaxStreamingFeePercentage(uint256)": FunctionFragment;
    "SetRFStorage(address)": FunctionFragment;
    "SetStreamingFeeModule(address)": FunctionFragment;
    "SetStreamingFeePercentage(uint256)": FunctionFragment;
    "SetTradeModule(address)": FunctionFragment;
    "createSet(address[],int256[],address[],address,string,string)": FunctionFragment;
    "debtIssuanceModuleV2()": FunctionFragment;
    "exchangeIssuanceZeroEx()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getRequiredIssuanceComponents(address,bool,address,uint256)": FunctionFragment;
    "getRequiredRedemptionComponents(address,bool,address,uint256)": FunctionFragment;
    "issueExactSetFromETH(address,uint256,bytes[],address,bool)": FunctionFragment;
    "managerIssueFee()": FunctionFragment;
    "managerRedeemFee()": FunctionFragment;
    "maxManagerFee()": FunctionFragment;
    "maxStreamingFeePercentage()": FunctionFragment;
    "owner()": FunctionFragment;
    "redeemExactSetForETH(address,uint256,uint256,bytes[],address,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rfStorage()": FunctionFragment;
    "setSetTokenCreator(address)": FunctionFragment;
    "setTokenCreator()": FunctionFragment;
    "streamingFeeModule()": FunctionFragment;
    "streamingFeePercentage()": FunctionFragment;
    "tradeModule()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SetDebtIssuanceModuleV2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SetExchangeIssuanceZeroEx",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SetFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SetManagerIssueFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetManagerRedeemFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetMaxManagerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetMaxStreamingFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetRFStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SetStreamingFeeModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SetStreamingFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetTradeModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSet",
    values: [string[], BigNumberish[], string[], string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debtIssuanceModuleV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeIssuanceZeroEx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredIssuanceComponents",
    values: [string, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredRedemptionComponents",
    values: [string, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueExactSetFromETH",
    values: [string, BigNumberish, BytesLike[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "managerIssueFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerRedeemFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxManagerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStreamingFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemExactSetForETH",
    values: [string, BigNumberish, BigNumberish, BytesLike[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rfStorage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSetTokenCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "streamingFeeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "streamingFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetDebtIssuanceModuleV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetExchangeIssuanceZeroEx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetManagerIssueFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetManagerRedeemFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetMaxManagerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetMaxStreamingFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetRFStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetStreamingFeeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetStreamingFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetTradeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtIssuanceModuleV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeIssuanceZeroEx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredIssuanceComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredRedemptionComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueExactSetFromETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerIssueFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerRedeemFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxManagerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStreamingFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemExactSetForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rfStorage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSetTokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamingFeeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamingFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ExchangeIssue(address,address,address,uint256,uint256)": EventFragment;
    "ExchangeRedeem(address,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeIssue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ExchangeIssueEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    _recipient: string;
    _setToken: string;
    _inputToken: string;
    _amountInputToken: BigNumber;
    _amountSetIssued: BigNumber;
  }
>;

export type ExchangeIssueEventFilter = TypedEventFilter<ExchangeIssueEvent>;

export type ExchangeRedeemEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    _recipient: string;
    _setToken: string;
    _outputToken: string;
    _amountSetRedeemed: BigNumber;
    _amountOutputToken: BigNumber;
  }
>;

export type ExchangeRedeemEventFilter = TypedEventFilter<ExchangeRedeemEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Chef extends BaseContract {
  contractName: "Chef";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    SetDebtIssuanceModuleV2(
      _debtIssuanceModuleV2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetExchangeIssuanceZeroEx(
      _exchangeIssuanceZeroEx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetManagerIssueFee(
      _managerIssueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetManagerRedeemFee(
      _managerRedeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetMaxManagerFee(
      _maxManagerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetMaxStreamingFeePercentage(
      _maxStreamingFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetRFStorage(
      _rfStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetStreamingFeeModule(
      _streamingFeeModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetStreamingFeePercentage(
      _streamingFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetTradeModule(
      _tradeModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSet(
      _components: string[],
      _units: BigNumberish[],
      _modules: string[],
      _manager: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debtIssuanceModuleV2(overrides?: CallOverrides): Promise<[string]>;

    exchangeIssuanceZeroEx(overrides?: CallOverrides): Promise<[string]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getRequiredIssuanceComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
    >;

    getRequiredRedemptionComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
    >;

    issueExactSetFromETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerIssueFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    managerRedeemFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxManagerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxStreamingFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeemExactSetForETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _minEthReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rfStorage(overrides?: CallOverrides): Promise<[string]>;

    setSetTokenCreator(
      _setTokenCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenCreator(overrides?: CallOverrides): Promise<[string]>;

    streamingFeeModule(overrides?: CallOverrides): Promise<[string]>;

    streamingFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradeModule(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  SetDebtIssuanceModuleV2(
    _debtIssuanceModuleV2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetExchangeIssuanceZeroEx(
    _exchangeIssuanceZeroEx: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetFeeRecipient(
    _feeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetManagerIssueFee(
    _managerIssueFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetManagerRedeemFee(
    _managerRedeemFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetMaxManagerFee(
    _maxManagerFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetMaxStreamingFeePercentage(
    _maxStreamingFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetRFStorage(
    _rfStorage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetStreamingFeeModule(
    _streamingFeeModule: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetStreamingFeePercentage(
    _streamingFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetTradeModule(
    _tradeModule: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSet(
    _components: string[],
    _units: BigNumberish[],
    _modules: string[],
    _manager: string,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debtIssuanceModuleV2(overrides?: CallOverrides): Promise<string>;

  exchangeIssuanceZeroEx(overrides?: CallOverrides): Promise<string>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getRequiredIssuanceComponents(
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    _setToken: string,
    _amountSetToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
  >;

  getRequiredRedemptionComponents(
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    _setToken: string,
    _amountSetToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
  >;

  issueExactSetFromETH(
    _setToken: string,
    _amountSetToken: BigNumberish,
    _componentQuotes: BytesLike[],
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerIssueFee(overrides?: CallOverrides): Promise<BigNumber>;

  managerRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

  maxManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

  maxStreamingFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeemExactSetForETH(
    _setToken: string,
    _amountSetToken: BigNumberish,
    _minEthReceive: BigNumberish,
    _componentQuotes: BytesLike[],
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rfStorage(overrides?: CallOverrides): Promise<string>;

  setSetTokenCreator(
    _setTokenCreator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenCreator(overrides?: CallOverrides): Promise<string>;

  streamingFeeModule(overrides?: CallOverrides): Promise<string>;

  streamingFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  tradeModule(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    SetDebtIssuanceModuleV2(
      _debtIssuanceModuleV2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    SetExchangeIssuanceZeroEx(
      _exchangeIssuanceZeroEx: string,
      overrides?: CallOverrides
    ): Promise<void>;

    SetFeeRecipient(
      _feeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    SetManagerIssueFee(
      _managerIssueFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SetManagerRedeemFee(
      _managerRedeemFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SetMaxManagerFee(
      _maxManagerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SetMaxStreamingFeePercentage(
      _maxStreamingFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SetRFStorage(_rfStorage: string, overrides?: CallOverrides): Promise<void>;

    SetStreamingFeeModule(
      _streamingFeeModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    SetStreamingFeePercentage(
      _streamingFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SetTradeModule(
      _tradeModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createSet(
      _components: string[],
      _units: BigNumberish[],
      _modules: string[],
      _manager: string,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    debtIssuanceModuleV2(overrides?: CallOverrides): Promise<string>;

    exchangeIssuanceZeroEx(overrides?: CallOverrides): Promise<string>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getRequiredIssuanceComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
    >;

    getRequiredRedemptionComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
    >;

    issueExactSetFromETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerIssueFee(overrides?: CallOverrides): Promise<BigNumber>;

    managerRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxStreamingFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeemExactSetForETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _minEthReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rfStorage(overrides?: CallOverrides): Promise<string>;

    setSetTokenCreator(
      _setTokenCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenCreator(overrides?: CallOverrides): Promise<string>;

    streamingFeeModule(overrides?: CallOverrides): Promise<string>;

    streamingFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    tradeModule(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExchangeIssue(address,address,address,uint256,uint256)"(
      _recipient?: string | null,
      _setToken?: string | null,
      _inputToken?: string | null,
      _amountInputToken?: null,
      _amountSetIssued?: null
    ): ExchangeIssueEventFilter;
    ExchangeIssue(
      _recipient?: string | null,
      _setToken?: string | null,
      _inputToken?: string | null,
      _amountInputToken?: null,
      _amountSetIssued?: null
    ): ExchangeIssueEventFilter;

    "ExchangeRedeem(address,address,address,uint256,uint256)"(
      _recipient?: string | null,
      _setToken?: string | null,
      _outputToken?: string | null,
      _amountSetRedeemed?: null,
      _amountOutputToken?: null
    ): ExchangeRedeemEventFilter;
    ExchangeRedeem(
      _recipient?: string | null,
      _setToken?: string | null,
      _outputToken?: string | null,
      _amountSetRedeemed?: null,
      _amountOutputToken?: null
    ): ExchangeRedeemEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    SetDebtIssuanceModuleV2(
      _debtIssuanceModuleV2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetExchangeIssuanceZeroEx(
      _exchangeIssuanceZeroEx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetManagerIssueFee(
      _managerIssueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetManagerRedeemFee(
      _managerRedeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetMaxManagerFee(
      _maxManagerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetMaxStreamingFeePercentage(
      _maxStreamingFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetRFStorage(
      _rfStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetStreamingFeeModule(
      _streamingFeeModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetStreamingFeePercentage(
      _streamingFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetTradeModule(
      _tradeModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSet(
      _components: string[],
      _units: BigNumberish[],
      _modules: string[],
      _manager: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debtIssuanceModuleV2(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeIssuanceZeroEx(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredIssuanceComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredRedemptionComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueExactSetFromETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerIssueFee(overrides?: CallOverrides): Promise<BigNumber>;

    managerRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxStreamingFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemExactSetForETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _minEthReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rfStorage(overrides?: CallOverrides): Promise<BigNumber>;

    setSetTokenCreator(
      _setTokenCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenCreator(overrides?: CallOverrides): Promise<BigNumber>;

    streamingFeeModule(overrides?: CallOverrides): Promise<BigNumber>;

    streamingFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    tradeModule(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetDebtIssuanceModuleV2(
      _debtIssuanceModuleV2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetExchangeIssuanceZeroEx(
      _exchangeIssuanceZeroEx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetManagerIssueFee(
      _managerIssueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetManagerRedeemFee(
      _managerRedeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetMaxManagerFee(
      _maxManagerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetMaxStreamingFeePercentage(
      _maxStreamingFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetRFStorage(
      _rfStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetStreamingFeeModule(
      _streamingFeeModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetStreamingFeePercentage(
      _streamingFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetTradeModule(
      _tradeModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSet(
      _components: string[],
      _units: BigNumberish[],
      _modules: string[],
      _manager: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debtIssuanceModuleV2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeIssuanceZeroEx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredIssuanceComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredRedemptionComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueExactSetFromETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerIssueFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerRedeemFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxManagerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxStreamingFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemExactSetForETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _minEthReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rfStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSetTokenCreator(
      _setTokenCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    streamingFeeModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    streamingFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
