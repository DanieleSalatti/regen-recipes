/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IExchangeIssuanceZeroExInterface extends utils.Interface {
  contractName: "IExchangeIssuanceZeroEx";
  functions: {
    "approveSetToken(address,address)": FunctionFragment;
    "approveToken(address,address)": FunctionFragment;
    "approveTokens(address[],address)": FunctionFragment;
    "getRequiredIssuanceComponents(address,bool,address,uint256)": FunctionFragment;
    "getRequiredRedemptionComponents(address,bool,address,uint256)": FunctionFragment;
    "issueExactSetFromETH(address,uint256,bytes[],address,bool)": FunctionFragment;
    "issueExactSetFromToken(address,address,uint256,uint256,bytes[],address,bool)": FunctionFragment;
    "redeemExactSetForETH(address,uint256,uint256,bytes[],address,bool)": FunctionFragment;
    "redeemExactSetForToken(address,address,uint256,uint256,bytes[],address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveSetToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTokens",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredIssuanceComponents",
    values: [string, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredRedemptionComponents",
    values: [string, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueExactSetFromETH",
    values: [string, BigNumberish, BytesLike[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "issueExactSetFromToken",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemExactSetForETH",
    values: [string, BigNumberish, BigNumberish, BytesLike[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemExactSetForToken",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      string,
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveSetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredIssuanceComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredRedemptionComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueExactSetFromETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueExactSetFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemExactSetForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemExactSetForToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExchangeIssuanceZeroEx extends BaseContract {
  contractName: "IExchangeIssuanceZeroEx";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeIssuanceZeroExInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveSetToken(
      _setToken: string,
      _issuanceModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveToken(
      _token: string,
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveTokens(
      _tokens: string[],
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRequiredIssuanceComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
    >;

    getRequiredRedemptionComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
    >;

    issueExactSetFromETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueExactSetFromToken(
      _setToken: string,
      _inputToken: string,
      _amountSetToken: BigNumberish,
      _maxAmountInputToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemExactSetForETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _minEthReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemExactSetForToken(
      _setToken: string,
      _outputToken: string,
      _amountSetToken: BigNumberish,
      _minOutputReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveSetToken(
    _setToken: string,
    _issuanceModule: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveToken(
    _token: string,
    _spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveTokens(
    _tokens: string[],
    _spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRequiredIssuanceComponents(
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    _setToken: string,
    _amountSetToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
  >;

  getRequiredRedemptionComponents(
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    _setToken: string,
    _amountSetToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
  >;

  issueExactSetFromETH(
    _setToken: string,
    _amountSetToken: BigNumberish,
    _componentQuotes: BytesLike[],
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueExactSetFromToken(
    _setToken: string,
    _inputToken: string,
    _amountSetToken: BigNumberish,
    _maxAmountInputToken: BigNumberish,
    _componentQuotes: BytesLike[],
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemExactSetForETH(
    _setToken: string,
    _amountSetToken: BigNumberish,
    _minEthReceive: BigNumberish,
    _componentQuotes: BytesLike[],
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemExactSetForToken(
    _setToken: string,
    _outputToken: string,
    _amountSetToken: BigNumberish,
    _minOutputReceive: BigNumberish,
    _componentQuotes: BytesLike[],
    _issuanceModule: string,
    _isDebtIssuance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveSetToken(
      _setToken: string,
      _issuanceModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveToken(
      _token: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTokens(
      _tokens: string[],
      _spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRequiredIssuanceComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
    >;

    getRequiredRedemptionComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { components: string[]; positions: BigNumber[] }
    >;

    issueExactSetFromETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueExactSetFromToken(
      _setToken: string,
      _inputToken: string,
      _amountSetToken: BigNumberish,
      _maxAmountInputToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemExactSetForETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _minEthReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemExactSetForToken(
      _setToken: string,
      _outputToken: string,
      _amountSetToken: BigNumberish,
      _minOutputReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    approveSetToken(
      _setToken: string,
      _issuanceModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveToken(
      _token: string,
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveTokens(
      _tokens: string[],
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRequiredIssuanceComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredRedemptionComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueExactSetFromETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueExactSetFromToken(
      _setToken: string,
      _inputToken: string,
      _amountSetToken: BigNumberish,
      _maxAmountInputToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemExactSetForETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _minEthReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemExactSetForToken(
      _setToken: string,
      _outputToken: string,
      _amountSetToken: BigNumberish,
      _minOutputReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveSetToken(
      _setToken: string,
      _issuanceModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveToken(
      _token: string,
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveTokens(
      _tokens: string[],
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRequiredIssuanceComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredRedemptionComponents(
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      _setToken: string,
      _amountSetToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueExactSetFromETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueExactSetFromToken(
      _setToken: string,
      _inputToken: string,
      _amountSetToken: BigNumberish,
      _maxAmountInputToken: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemExactSetForETH(
      _setToken: string,
      _amountSetToken: BigNumberish,
      _minEthReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemExactSetForToken(
      _setToken: string,
      _outputToken: string,
      _amountSetToken: BigNumberish,
      _minOutputReceive: BigNumberish,
      _componentQuotes: BytesLike[],
      _issuanceModule: string,
      _isDebtIssuance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
